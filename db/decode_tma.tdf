--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 21.1 cbx_cycloneii 2022:06:23:22:02:32:SJ cbx_lpm_add_sub 2022:06:23:22:02:32:SJ cbx_lpm_compare 2022:06:23:22:02:32:SJ cbx_lpm_decode 2022:06:23:22:02:32:SJ cbx_mgl 2022:06:23:22:26:17:SJ cbx_nadder 2022:06:23:22:02:32:SJ cbx_stratix 2022:06:23:22:02:32:SJ cbx_stratixii 2022:06:23:22:02:32:SJ  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2267w[1..0]	: WIRE;
	w_anode2276w[3..0]	: WIRE;
	w_anode2293w[3..0]	: WIRE;
	w_anode2303w[3..0]	: WIRE;
	w_anode2313w[3..0]	: WIRE;
	w_anode2323w[3..0]	: WIRE;
	w_anode2333w[3..0]	: WIRE;
	w_anode2343w[3..0]	: WIRE;
	w_anode2353w[3..0]	: WIRE;
	w_anode2365w[1..0]	: WIRE;
	w_anode2372w[3..0]	: WIRE;
	w_anode2383w[3..0]	: WIRE;
	w_anode2393w[3..0]	: WIRE;
	w_anode2403w[3..0]	: WIRE;
	w_anode2413w[3..0]	: WIRE;
	w_anode2423w[3..0]	: WIRE;
	w_anode2433w[3..0]	: WIRE;
	w_anode2443w[3..0]	: WIRE;
	w_data2265w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2443w[3..3], w_anode2433w[3..3], w_anode2423w[3..3], w_anode2413w[3..3], w_anode2403w[3..3], w_anode2393w[3..3], w_anode2383w[3..3], w_anode2372w[3..3]), ( w_anode2353w[3..3], w_anode2343w[3..3], w_anode2333w[3..3], w_anode2323w[3..3], w_anode2313w[3..3], w_anode2303w[3..3], w_anode2293w[3..3], w_anode2276w[3..3]));
	w_anode2267w[] = ( (w_anode2267w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2276w[] = ( (w_anode2276w[2..2] & (! w_data2265w[2..2])), (w_anode2276w[1..1] & (! w_data2265w[1..1])), (w_anode2276w[0..0] & (! w_data2265w[0..0])), w_anode2267w[1..1]);
	w_anode2293w[] = ( (w_anode2293w[2..2] & (! w_data2265w[2..2])), (w_anode2293w[1..1] & (! w_data2265w[1..1])), (w_anode2293w[0..0] & w_data2265w[0..0]), w_anode2267w[1..1]);
	w_anode2303w[] = ( (w_anode2303w[2..2] & (! w_data2265w[2..2])), (w_anode2303w[1..1] & w_data2265w[1..1]), (w_anode2303w[0..0] & (! w_data2265w[0..0])), w_anode2267w[1..1]);
	w_anode2313w[] = ( (w_anode2313w[2..2] & (! w_data2265w[2..2])), (w_anode2313w[1..1] & w_data2265w[1..1]), (w_anode2313w[0..0] & w_data2265w[0..0]), w_anode2267w[1..1]);
	w_anode2323w[] = ( (w_anode2323w[2..2] & w_data2265w[2..2]), (w_anode2323w[1..1] & (! w_data2265w[1..1])), (w_anode2323w[0..0] & (! w_data2265w[0..0])), w_anode2267w[1..1]);
	w_anode2333w[] = ( (w_anode2333w[2..2] & w_data2265w[2..2]), (w_anode2333w[1..1] & (! w_data2265w[1..1])), (w_anode2333w[0..0] & w_data2265w[0..0]), w_anode2267w[1..1]);
	w_anode2343w[] = ( (w_anode2343w[2..2] & w_data2265w[2..2]), (w_anode2343w[1..1] & w_data2265w[1..1]), (w_anode2343w[0..0] & (! w_data2265w[0..0])), w_anode2267w[1..1]);
	w_anode2353w[] = ( (w_anode2353w[2..2] & w_data2265w[2..2]), (w_anode2353w[1..1] & w_data2265w[1..1]), (w_anode2353w[0..0] & w_data2265w[0..0]), w_anode2267w[1..1]);
	w_anode2365w[] = ( (w_anode2365w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2372w[] = ( (w_anode2372w[2..2] & (! w_data2265w[2..2])), (w_anode2372w[1..1] & (! w_data2265w[1..1])), (w_anode2372w[0..0] & (! w_data2265w[0..0])), w_anode2365w[1..1]);
	w_anode2383w[] = ( (w_anode2383w[2..2] & (! w_data2265w[2..2])), (w_anode2383w[1..1] & (! w_data2265w[1..1])), (w_anode2383w[0..0] & w_data2265w[0..0]), w_anode2365w[1..1]);
	w_anode2393w[] = ( (w_anode2393w[2..2] & (! w_data2265w[2..2])), (w_anode2393w[1..1] & w_data2265w[1..1]), (w_anode2393w[0..0] & (! w_data2265w[0..0])), w_anode2365w[1..1]);
	w_anode2403w[] = ( (w_anode2403w[2..2] & (! w_data2265w[2..2])), (w_anode2403w[1..1] & w_data2265w[1..1]), (w_anode2403w[0..0] & w_data2265w[0..0]), w_anode2365w[1..1]);
	w_anode2413w[] = ( (w_anode2413w[2..2] & w_data2265w[2..2]), (w_anode2413w[1..1] & (! w_data2265w[1..1])), (w_anode2413w[0..0] & (! w_data2265w[0..0])), w_anode2365w[1..1]);
	w_anode2423w[] = ( (w_anode2423w[2..2] & w_data2265w[2..2]), (w_anode2423w[1..1] & (! w_data2265w[1..1])), (w_anode2423w[0..0] & w_data2265w[0..0]), w_anode2365w[1..1]);
	w_anode2433w[] = ( (w_anode2433w[2..2] & w_data2265w[2..2]), (w_anode2433w[1..1] & w_data2265w[1..1]), (w_anode2433w[0..0] & (! w_data2265w[0..0])), w_anode2365w[1..1]);
	w_anode2443w[] = ( (w_anode2443w[2..2] & w_data2265w[2..2]), (w_anode2443w[1..1] & w_data2265w[1..1]), (w_anode2443w[0..0] & w_data2265w[0..0]), w_anode2365w[1..1]);
	w_data2265w[2..0] = data_wire[2..0];
END;
--VALID FILE
